<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>软件协同设计期末复习</title>
      <link href="/2021/06/18/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
      <url>/2021/06/18/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="软件协同期末复习"><a href="#软件协同期末复习" class="headerlink" title="软件协同期末复习"></a>软件协同期末复习</h1><h2 id="1-团队有那几个角色，每个角色的职责是什么？"><a href="#1-团队有那几个角色，每个角色的职责是什么？" class="headerlink" title="1. 团队有那几个角色，每个角色的职责是什么？"></a>1. 团队有那几个角色，每个角色的职责是什么？</h2><ul><li><p>小组长</p><ul><li>团队建设</li><li>活动的组织</li><li>项目的审核以及总结</li></ul><span id="more"></span><p><img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210616233346337-1624026462955.png" alt="image-20210616233346337"></p></li><li><p>开发经理</p><ul><li>项目的设计与实现</li></ul><p><img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210616233548609-1624026462955.png" alt="image-20210616233548609"></p></li><li><p>计划经理</p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210616234046030-1624026462956.png" alt="image-20210616234046030"></p><p>质量经理</p><ul><li><p>计划的制定以及监控</p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210616234112469-1624026462956.png" alt="image-20210616234112469"></p></li></ul></li><li><p>测试经理</p><ul><li>项目的测试</li></ul></li><li><p>产品经理</p><ul><li>项目的需求分析</li></ul><p><img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210616233500310-1624026462956.png" alt="image-20210616233500310"></p></li></ul><h2 id="2-计划阶段"><a href="#2-计划阶段" class="headerlink" title="2.计划阶段"></a>2.计划阶段</h2><ul><li><p>为什么要做计划?</p><div class="note info simple"><p>答:  没有计划的项目是<wavy>危险的</wavy></p><ul><li>软件项目中的任务众多(组件团队，需求分析，设计，采购。。。。)</li><li>制约软件项目的因素众多（时间，成本，质量，人员。。。）</li><li>软件项目容易产生： 软件危机</li><li>仿照生产计划——软件计划—–》保证软件开发</li></ul></div></li><li><p>要有多少种计划?课程中强调哪几种?</p><div class="note info simple"><p>答:</p><ul><li>项目范围管理计划</li><li>进度管理计划 (课程强调)</li><li>成本管理计划</li><li>质量管理计划  (课程强调)</li><li>过程改进计划</li><li>人力配备管理计划</li><li>沟通管理计划</li><li>风险管理计划</li><li>采购管理计划</li><li>合同管理计划</li><li>测试计划  (课程强调)</li></ul></div></li><li><p>计划的作用</p><div class="note info simple"><p>答: 为项目负责人提供一个框架，使之能<emp>合理地估算</emp>软件项目开发所需的资源 、经费和开发进度，并控制软件项目开发过程并按此计划进行。</p></div></li><li><p>通过哪几步制定计划</p><div class="note info simple"><ol><li>明确目标</li><li>制定项目工作范围</li><li>在项目组内分配任务职责</li><li>统筹规划项目间活动的关联</li></ol></div></li><li><p>W B S</p></li><li><p>每个计划包含的内容</p><ul><li><p>进度计划</p><ul><li><p>活动的定义</p><div class="note info simple"><p>活动: 是软件项目为产生各个可交付成果（如代码）所必须进行的具体活动，完成了这些活动意味着完成了WBS结构中的项目细目和子细目。<br> 活动定义的目的是将软件项目工作分解为更小、更易管理的工作包，也叫活动或任务。这些小的活动应该是能够保障完成交付软件产品的可实施的详细任务。    </p></div><table><thead><tr><th><strong>阶段名</strong></th><th><strong>编号</strong></th><th><strong>任务</strong></th></tr></thead><tbody><tr><td>启动</td><td>1</td><td>1、组建团队2、产品范围3、评审4、监管</td></tr><tr><td>计划</td><td>2</td><td>1、进度计划2、质量计划3、评审4、监管</td></tr><tr><td>需求</td><td>3</td><td>1、调研2、需求分析3、需求报告4、评审5、监管</td></tr><tr><td>设计</td><td>4</td><td>1、概要设计2、详细设计3、测试计划4、评审5、监管</td></tr><tr><td>编程</td><td>5</td><td>1、编程2、测试3、监管</td></tr><tr><td>交付</td><td>6</td><td>1、各类文档的编写2、系统的配置和调试3、培训</td></tr></tbody></table></li><li><p>活动排序</p></li><li><p>活动资源估算</p></li><li><p>活动持续时间估算</p></li><li><p>制定进度表</p></li><li><p>编制进度计划说明书</p></li></ul></li><li><p>质量计划</p><ul><li><p>质量目标</p></li><li><p>缺陷引入与排除率</p><p>​    <div class="note info simple"><ul><li><p>缺陷引入率<br>程序员有一个共同的特点，他们都会引入许多缺陷。<br>在详细设计过程中会引入2个缺陷/小时<br>在编码程中会引入6个缺陷/小时。</p></li><li><p>缺陷排除比率<br>在设计复核过程中排除2个缺陷/小时<br>在代码复核过程中排除6个缺陷/小时</p></li></ul></div></p><ul><li><p>制定质量计划</p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210619145810989.png" alt="image-20210619145810989"></p></li><li><p>工作跟踪</p><ul><li>产生实际数据</li><li>记录每项工作的完成日期</li></ul></li></ul></li></ul></li><li><p>测试计划</p><ul><li>单元测试</li><li>集成测试</li><li>确认测试和系统测试的测试计划制定</li><li>测试用例设计</li><li>测试执行</li></ul></li></ul></li></ul><h2 id="3-系统需求分析阶段"><a href="#3-系统需求分析阶段" class="headerlink" title="3. 系统需求分析阶段"></a>3. 系统需求分析阶段</h2><ul><li>从哪几个方面对系统进行需求分析？<ul><li>系统用户的类型有哪些(角色)？</li><li>从角色出发获得系统的功能需求(必备,至少要有)</li><li>其他</li></ul></li><li>需要用到哪几个工具?<ul><li><p>用例图</p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210619155859921.png" alt="image-20210619155859921"></p><p><a href="https://www.jianshu.com/p/62a84cdc3faa">用例图教程</a></p></li><li><p>用例说明</p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210619155822882.png" alt="image-20210619155822882"></p></li><li><p>协作图</p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210619155922029.png" alt="image-20210619155922029"></p></li><li><p>E-R图</p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210619155942828.png" alt="image-20210619155942828"></p><p><a href="https://blog.csdn.net/chenpidaxia/article/details/62073162">E-R图教程</a></p></li></ul></li><li>需求报告<ul><li>包含哪几点</li><li>质量如何</li></ul></li></ul><h2 id="4-设计阶段"><a href="#4-设计阶段" class="headerlink" title="4. 设计阶段"></a>4. 设计阶段</h2><ul><li>设计哪几项<ul><li><p>系统平台确定</p><ul><li>开发环境</li><li>模式、架构(如M V C设计模式)<ul><li>页面设计</li><li>控制类设计</li><li>数据库设计</li></ul></li></ul></li><li><p>运行设计——时序图</p><p><a href="https://www.jianshu.com/p/c5209bde7287">时序图教程</a></p></li><li><p>给控制类画类图(包括关联)</p><p><a href="https://www.jianshu.com/p/57620b762160">类图教程1</a></p><p><a href="https://www.cnblogs.com/ubuntu1/p/9140055.html">类图教程2</a></p></li><li><p>活动图/流程图画类中方法的处理流程</p><ul><li><a href="https://blog.csdn.net/weixin_42119415/article/details/90474097">活动图教程</a></li><li><a href="https://www.jianshu.com/p/4a339e558b5f">流程图教程</a></li></ul></li></ul><h2 id="5-开发阶段与测试阶段"><a href="#5-开发阶段与测试阶段" class="headerlink" title="5. 开发阶段与测试阶段"></a>5. 开发阶段与测试阶段</h2></li><li>测试报告包含了哪些内容</li><li>测试用例正确理解，正确设定一个测试用例(重要)</li></ul><hr><h2 id="6-题型"><a href="#6-题型" class="headerlink" title="6. 题型"></a>6. 题型</h2><ul><li>简答题 <span class='p red'>50分</span><ul><li>如每个阶段用什么工具、制定计划哪几步？</li></ul></li><li>案例设计 <span class='p blue'>50分</span><ul><li>根据项目简介做<ul><li>需求分析</li><li>设计</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 💥软件协同设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 🌹期末 </tag>
            
            <tag> 🎁复习提纲 </tag>
            
            <tag> 🐷软件协同设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式期末复习</title>
      <link href="/2021/06/18/%E5%B5%8C%E5%85%A5%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
      <url>/2021/06/18/%E5%B5%8C%E5%85%A5%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 align="center">嵌入式期末复习</h3><hr><blockquote><p><strong>题型</strong>: </p><ul><li><strong>判断题</strong>(会有作业的单选和多选题)</li><li><strong>简答题</strong></li><li><strong>设计题</strong></li><li><strong>程序题</strong></li></ul></blockquote><span id="more"></span><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">OS.EVENT * mySem,myBox;</span><br><span class="line">main() &#123;</span><br><span class="line">    OSTaskCreate(sp,一个参数);</span><br><span class="line">    任务名称、堆栈指针(顶)、分配堆栈、优先级、任务代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>简答题 <strong>p p t 全有</strong></p></blockquote><p><img src="/images/%E5%B5%8C%E5%85%A5%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/9E42F84B69AF2E020CAB13CC8796997F-1624026367098.jpg" alt="img"><img src="/images/%E5%B5%8C%E5%85%A5%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/D0DBC768767751AFBA2C89AD6D04B9B6-1624026367099.jpg" alt="img"></p><blockquote><h4 id="点灯的细节"><a href="#点灯的细节" class="headerlink" title="点灯的细节"></a>点灯的细节</h4><p>p33 —-p3口第三引脚</p><p>ARM 32位字长</p><p><img src="/images/%E5%B5%8C%E5%85%A5%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/14BC44A5034B4BD3FF447FCF77146BF4-1624026367099.jpg" alt="img"></p><p><img src="/images/%E5%B5%8C%E5%85%A5%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/9C00BD22061AEE082D8DCFE36105878F-1624026367099.jpg" alt="img"></p><p><img src="/images/%E5%B5%8C%E5%85%A5%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/E2C273CEB24BAECB70A614F923E6C4C0-1624026367099.jpg" alt="img"></p></blockquote><blockquote><h4 id="等待列表和就绪表的计算"><a href="#等待列表和就绪表的计算" class="headerlink" title="等待列表和就绪表的计算"></a><em>等待列表</em>和<em>就绪表</em>的计算</h4><p><img src="/images/%E5%B5%8C%E5%85%A5%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210618105144680-1624026367099.png" alt="image-20210618105144680"></p></blockquote><blockquote><h4 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h4><p>中断用<strong>MSP</strong></p><p>MSP 特权级堆栈指针</p><p>PSP 用户级堆栈指针</p><p>中断服务程序不可以创建任务、分配堆栈、设置延时等</p><p>调用了lock函数的任务不可以调用任何使它挂起的函数</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 🌮嵌入式技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 🌹期末 </tag>
            
            <tag> 🎁复习提纲 </tag>
            
            <tag> 🍟嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式期末复习</title>
      <link href="/2021/06/18/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
      <url>/2021/06/18/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="分布式计算期末复习"><a href="#分布式计算期末复习" class="headerlink" title="分布式计算期末复习"></a>分布式计算期末复习</h1><hr><blockquote><p>闭卷考A/B卷</p></blockquote><ol><li><strong>问答题</strong> * 4 —— 33%</li><li><strong>案例应用题</strong> * 3 —— 33%<ul><li>设计思路</li><li>框架</li></ul></li><li><strong>代码题</strong> * 4 —— 33%</li></ol><hr><span id="more"></span><h2 id="1-JAVA编程基础"><a href="#1-JAVA编程基础" class="headerlink" title="1. JAVA编程基础"></a>1. JAVA编程基础</h2><ul><li><p>Lambda表达式，能将代码改成Lambda表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 不需要参数,返回值为 5  </span></span><br><span class="line">() -&gt; <span class="number">5</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 2. 接收一个参数(数字类型),返回其2倍的值  </span></span><br><span class="line">x -&gt; <span class="number">2</span> * x  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 3. 接受2个参数(数字),并返回他们的差值  </span></span><br><span class="line">(x, y) -&gt; x – y  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 4. 接收2个int型整数,返回他们的和  </span></span><br><span class="line">(<span class="keyword">int</span> x, <span class="keyword">int</span> y) -&gt; x + y  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 5. 接受一个 string 对象,并在控制台打印,不返回任何值(看起来像是返回void)  </span></span><br><span class="line">(String s) -&gt; System.out.print(s)</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 大括号中的返回语句</span></span><br><span class="line">MathOperation multiplication = (<span class="keyword">int</span> a, <span class="keyword">int</span> b) -&gt; &#123; <span class="keyword">return</span> a * b; &#125;;</span><br></pre></td></tr></table></figure><p><strong>例题</strong></p><p>原始代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.BorderLayout;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ex8_10_UseButtonEvent</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">JFrame frm = <span class="keyword">new</span> JFrame(<span class="string">&quot;实验1&quot;</span>);</span><br><span class="line">frm.setLayout(<span class="keyword">new</span> BorderLayout());</span><br><span class="line">JButton btn = <span class="keyword">new</span> JButton(<span class="string">&quot;按钮&quot;</span>);</span><br><span class="line">frm.getContentPane().add(btn);</span><br><span class="line">ButtonHandler btnHandler = <span class="keyword">new</span> ButtonHandler();</span><br><span class="line">btn.addActionListener(btnHandler); </span><br><span class="line"></span><br><span class="line">frm.setBounds(<span class="number">400</span>, <span class="number">200</span>, <span class="number">400</span>, <span class="number">200</span>);</span><br><span class="line">frm.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将其修改为箭头函数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ButtonHandler</span> <span class="keyword">implements</span> <span class="title">ActionListener</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;点击按钮&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改后:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.USST.Tamiflu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.BorderLayout;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ex8_10_UseButtonEvent</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">JFrame frm = <span class="keyword">new</span> JFrame(<span class="string">&quot;实验1&quot;</span>);</span><br><span class="line">frm.setLayout(<span class="keyword">new</span> BorderLayout());</span><br><span class="line"></span><br><span class="line"><span class="comment">// lambda修改事件处理</span></span><br><span class="line">JButton btn = <span class="keyword">new</span> JButton(<span class="string">&quot;按钮&quot;</span>);</span><br><span class="line">frm.getContentPane().add(btn);</span><br><span class="line"><span class="comment">//lambda表达式</span></span><br><span class="line">btn.addActionListener((e) -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;点击按钮&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">frm.setBounds(<span class="number">400</span>, <span class="number">200</span>, <span class="number">400</span>, <span class="number">200</span>);</span><br><span class="line">frm.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>泛型能看懂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    1:把泛型定义在类上</span></span><br><span class="line"><span class="comment">    2:类型变量定义在类上,方法中也可以使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectTool</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T obj;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getObj</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObj</span><span class="params">(T obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-JAVA高级功能"><a href="#2-JAVA高级功能" class="headerlink" title="2. JAVA高级功能"></a>2. JAVA高级功能</h2><ul><li><p>会写反射代码(给你相关类和方法，按要求将类实例化对象，<wavy>用反射来实例化成对象</wavy>，<wavy>用反射去调用方法(有参/无参)和成员变量</wavy>，<emp>不可直接new!</emp>)</p><div class="tip faa-horizontal animated"><p><span class='p red h4'>JAVA反射机制</span>是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法；这种动态获取的信息以及动态调用对象的方法的功能称为<emp>java语言的反射机制</emp>。</p></div><ol><li><p>反射获取Class对象</p><details green open><summary> 查看如何用反射获取Class并生成实例 </summary>              <div class='content'>              <p><img src="/images/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210622094333162.png" alt="image-20210622094333162"></p><p><img src="/images/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210619194644783.png" alt="image-20210619194644783"></p>              </div>            </details></li><li><p>反射获取类的方法并调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得当前类以及超类的public Method：</span></span><br><span class="line">Method[] arrMethods = classType. getMethods();</span><br><span class="line"><span class="comment">//获得当前类申明的所有Method：</span></span><br><span class="line">Method[] arrMethods = classType. getDeclaredMethods();</span><br><span class="line"><span class="comment">//获得当前类以及超类指定的public Method：</span></span><br><span class="line">Method method = classType. getMethod(String name, Class&lt;?&gt;... parameterTypes);</span><br><span class="line"><span class="comment">//获得当前类申明的指定的Method：</span></span><br><span class="line">Method method = classType. getDeclaredMethod(String name, Class&lt;?&gt;... parameterTypes) </span><br><span class="line"><span class="comment">//通过反射动态运行指定Method,Class... args为可变长参数写法(可当成可变长数组)：</span></span><br><span class="line">Object obj = method. invoke(Object obj, Object... args) </span><br><span class="line"></span><br></pre></td></tr></table></figure><details green open><summary> 查看反射调用类方法的案例 </summary>              <div class='content'>              <p><img src="/images/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210619200707202.png" alt="image-20210619200707202"></p>              </div>            </details></li><li><p>利用反射获取类的属性以及调用对象的getter和setter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得当前类以及超类的public Field：</span></span><br><span class="line">Field[] arrFields = classType. getFields();</span><br><span class="line"><span class="comment">//获得当前类申明的所有Field：</span></span><br><span class="line">Field[] arrFields = classType. getDeclaredFields();</span><br><span class="line"><span class="comment">//获得当前类以及超类指定的public Field：</span></span><br><span class="line">Field field = classType. getField(String name);</span><br><span class="line"><span class="comment">//获得当前类申明的指定的Field：</span></span><br><span class="line">Field field = classType. getDeclaredField(String name); </span><br><span class="line"><span class="comment">//通过反射动态设定Field的值：</span></span><br><span class="line">fieldType.set(Object obj, Object value);</span><br><span class="line"><span class="comment">//通过反射动态获取Field的值： </span></span><br><span class="line">Object obj = fieldType. get(Object obj) ;</span><br><span class="line"></span><br></pre></td></tr></table></figure><details green open><summary> 查看反射获取属性并调用getter和setter案例 </summary>              <div class='content'>              <p><img src="/images/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210619201231566.png" alt="image-20210619201231566"></p>              </div>            </details></li><li><p>总结</p><p><img src="/images/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210619201703906.png" alt="image-20210619201703906"></p></li><li><p>综合案例</p><details green><summary> 查看反射的综合案例 </summary>              <div class='content'>              <p>当前Cat类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Cat</span><span class="params">(String name, Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">(String words)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是一只猫&quot;</span> + words);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;Cat&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Cat&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>通过反射获取带参构造函数并实例化对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reflex1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获取字节码文件</span></span><br><span class="line">        Class&lt;Cat&gt; clazz = Cat.class;</span><br><span class="line">        <span class="comment">//获取参数第一个为String类型和第二个为Integer类型的构造方法</span></span><br><span class="line">        Constructor&lt;Cat&gt; constructor = clazz.getDeclaredConstructor(String.class, Integer.class);</span><br><span class="line">        <span class="comment">//使用时取消 Java 语言访问检查</span></span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//传参</span></span><br><span class="line">        Cat cat = constructor.newInstance(<span class="string">&quot;咖菲猫&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        System.out.println(cat);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">控制台打印:</span></span><br><span class="line"><span class="comment">Cat&#123;name=‘咖菲猫’, age=10&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>反射获取属性值并赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reflex2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获取字节码文件</span></span><br><span class="line">        Class&lt;Cat&gt; clazz = Cat.class;</span><br><span class="line">        <span class="comment">//获取参数第一个为String类型和第二个为Integer类型的构造方法</span></span><br><span class="line">        Constructor&lt;Cat&gt; constructor = clazz.getDeclaredConstructor();</span><br><span class="line">        <span class="comment">//使用时取消 Java 语言访问检查</span></span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//实例化对象</span></span><br><span class="line">        Cat cat = constructor.newInstance();</span><br><span class="line">        <span class="comment">//获取所有字段数组</span></span><br><span class="line">        Field[] fields = clazz.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            <span class="comment">//打印字段名和类型</span></span><br><span class="line">            System.out.println(<span class="string">&quot;字段名=&quot;</span> + field.getName() + <span class="string">&quot;字段类型=&quot;</span> + field.getType());</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (field.getType().equals(String.class)) &#123;</span><br><span class="line">                field.set(cat, <span class="string">&quot;咖菲猫&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (field.getType().equals(Integer.class)) &#123;</span><br><span class="line">                field.set(cat, <span class="number">11</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(cat);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">控制台打印:</span></span><br><span class="line"><span class="comment">字段名=name字段类型=class java.lang.String</span></span><br><span class="line"><span class="comment">字段名=age字段类型=class java.lang.Integer</span></span><br><span class="line"><span class="comment">Cat&#123;name=‘咖菲猫’, age=11&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>通过反射调用所有方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reflex3</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获取字节码文件</span></span><br><span class="line">        Class&lt;Cat&gt; clazz = Cat.class;</span><br><span class="line">        <span class="comment">//获取参数第一个为String类型和第二个为Integer类型的构造方法</span></span><br><span class="line">        Constructor&lt;Cat&gt; constructor = clazz.getDeclaredConstructor();</span><br><span class="line">        <span class="comment">//使用时取消 Java 语言访问检查</span></span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//实例化对象</span></span><br><span class="line">        Cat cat = constructor.newInstance();</span><br><span class="line">        <span class="comment">//获取所有方法名 但不包括继承的方法</span></span><br><span class="line">        Method[] methods = clazz.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;方法名=&quot;</span> + method.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        Method[] sayMethod = clazz.getDeclaredMethod(<span class="string">&quot;say&quot;</span>,<span class="keyword">new</span> Class&lt;?&gt;[]&#123;String.class&#125;);</span><br><span class="line">        sayMethod.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        sayMethod.invoke(cat,<span class="keyword">new</span> Object[]&#123;<span class="string">&quot;喵喵&quot;</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">控制台打印:</span></span><br><span class="line"><span class="comment">方法名=toString</span></span><br><span class="line"><span class="comment">方法名=say</span></span><br><span class="line"><span class="comment">我是一只猫喵喵</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>              </div>            </details></li></ol></li><li><p>依赖注入DI和控制反转 I O C 的代码以及概念</p><ul><li><p>什么是依赖注入(来源于DIP依赖倒置)</p><div class="tip faa-horizontal animated"><p><span class='p red h4'>依赖注入DI（Dependency Injection）</span> ：所依赖的对象由外部IOC容器注入进去</p></div></li><li><p>什么是DIP</p><p><img src="/images/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210619202946638.png" alt="image-20210619202946638"></p><p>可以<emp>减少类与类之间的耦合性</emp>，提高系统<span class='p blue'>稳定性</span>、<span class='p red'>可读性</span> 、<span class='p green'>可维护性</span>, 通常利用IOC来实现DIP,DI是IOC的一个具体实现方式。</p><p><img src="/images/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/7305208-1db15d7c5583c55b.jpg" alt="img"></p><div class="tag link"><a class="link-card" title="不错的DIP与DI教程" href="https://blog.csdn.net/u011857683/article/details/80287274"><div class="left"><img src="/img/favicon.png"/></div><div class="right"><p class="text">不错的DIP与DI教程</p><p class="url">https://blog.csdn.net/u011857683/article/details/80287274</p></div></a></div><div class="tag link"><a class="link-card" title="不错的DIP与DI教程2" href="https://www.jianshu.com/p/db042e29143d"><div class="left"><img src="/img/favicon.png"/></div><div class="right"><p class="text">不错的DIP与DI教程2</p><p class="url">https://www.jianshu.com/p/db042e29143d</p></div></a></div></li><li><p>优点，解决了什么问题(解决了DIP)</p><ol><li><p>从代码中隔离对象创建过程，使代码更加干净和可读。</p></li><li><p>使模块100％松耦合。</p></li><li><p>交换依赖关系只是配置问题 - 代码中不需要进行任何更改。</p></li></ol></li><li><p>如何反转控制(IOC)?(用DI)</p></li><li><p>依赖注入常见的方式(主要是前两种构造函数注入和setter注入),会写代码</p></li><li><p>代码题: 用依赖注入改写程序</p></li></ul></li><li><p>代理模式</p><ul><li>A O P是代理模式的重要应用</li><li>代理模式的概念</li><li>静态代理与动态代理(动态更重要)</li><li>不考代码，但要知道动态代理实现的过程和概念</li><li>A O P的概念，要自己总结一个完整概念，为啥要有A O P(减小程序耦合度)</li><li>A O P的应用场景(日志、安全等)</li></ul></li><li><p>R P C</p><ul><li>概念</li><li>常见实现方案有哪些</li><li>框架的基本原理(会画那张图)</li></ul></li><li><p>R M I</p><ul><li>知道概念就行，不考代码</li></ul></li></ul><h2 id="3-网络I-O"><a href="#3-网络I-O" class="headerlink" title="3. 网络I/O"></a>3. 网络I/O</h2><ul><li><p>基本概念: 阻塞、非阻塞、异步、同步…</p></li><li><p>网络I/O常见的通信模型</p><p><img src="/images/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210617083724144.png" alt="image-20210617083724144"></p></li><li><p>Netty应用场景</p><p><img src="/images/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210618214012163.png" alt="image-20210618214012163"></p></li><li><p>现有R P C的解决方案(技术选型)</p><p><img src="/images/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210617083950144.png" alt="image-20210617083950144"></p></li></ul><h2 id="4-消息中间件M-Q"><a href="#4-消息中间件M-Q" class="headerlink" title="4. 消息中间件M Q"></a>4. 消息中间件M Q</h2><ul><li><p>M Q能干啥</p></li><li><p>设计题，设计网络架构来解决应用场景(可用M Q，用具体产品，如Active M Q或Rabbit M Q)</p></li><li><p>能画这个设计方案的架构图</p><p><img src="/images/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210617084716784.png" alt="image-20210617084716784"></p></li><li><p>M Q的概念</p></li></ul><h2 id="5-分布式存储"><a href="#5-分布式存储" class="headerlink" title="5. 分布式存储"></a>5. 分布式存储</h2><ul><li><p>结构化、半结构化、非结构化</p></li><li><p>关系模型不考</p></li><li><p>主要考核</p><ul><li>非结构化数据——分布式文件系统Ha d o o p</li><li>半结构化数据——N O S Q L</li></ul></li><li><p>案例分析，给一个业务场景，用服务器的拆分、消息队列、缓存(用尽可能多的方案)，不会细到拆表</p><p><img src="/images/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210617085320731.png" alt="image-20210617085320731"></p></li><li><p>NO S Q L</p><ul><li><p>理论基石C A P</p><p><img src="/images/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210617085431930.png" alt="image-20210617085431930"></p></li><li><p>C A P的概念</p><p><img src="/images/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210617085505592.png" alt="image-20210617085505592"></p></li><li><p>NO S Q L四大类型</p></li><li><p>主要考核redis</p><ul><li><p>REDIS架构图</p><p><img src="/images/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210617085849979.png" alt="image-20210617085849979"></p><p><img src="/images/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210618213609050-1624023438557.png" alt="image-20210618213609050"></p></li><li><p>给关系模型的表，让你转换成redis存储(案例分析题10分)</p></li></ul></li></ul></li></ul><h2 id="6-分布式架构"><a href="#6-分布式架构" class="headerlink" title="6. 分布式架构"></a>6. 分布式架构</h2><ul><li>SOA和微服务概念</li></ul><h2 id="7-大数据"><a href="#7-大数据" class="headerlink" title="7. 大数据"></a>7. 大数据</h2><ul><li><p>基本概念以及hadoop的使用</p></li><li><p>HDFS架构</p><p><img src="/images/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210617090134059.png" alt="image-20210617090134059"></p><p>几个Node分别干嘛</p></li><li><p>hdfs基本命令(案例题，类似于实验1)</p><p><img src="/images/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210617090220829.png" alt="image-20210617090220829"></p></li><li><p>MapReduce</p><ul><li><p>会写代码(WordCount)</p></li><li><p>Shuffling过程</p></li><li><p>会画图(不一定是WordCount，区别可能只是在Reducing),了解每一过程做了什么</p><p><img src="/images/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210617090634299.png" alt="image-20210617090634299"></p></li><li><p>会写Mapper函数和Reducer函数(类似实验2)</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 🎉分布式计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 💖分布式计算 </tag>
            
            <tag> 🌹期末 </tag>
            
            <tag> 🎁复习提纲 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
