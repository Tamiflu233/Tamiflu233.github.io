<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tamiflu233&#39;s Blog</title>
  
  <subtitle>一个小菜鸡</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-06-20T06:30:14.252Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Tamiflu233</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>软件协同设计期末复习</title>
    <link href="http://example.com/2021/06/18/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    <id>http://example.com/2021/06/18/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</id>
    <published>2021-06-18T13:44:48.000Z</published>
    <updated>2021-06-20T06:30:14.252Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="软件协同期末复习"><a href="#软件协同期末复习" class="headerlink" title="软件协同期末复习"></a>软件协同期末复习</h1><h2 id="1-团队有那几个角色，每个角色的职责是什么？"><a href="#1-团队有那几个角色，每个角色的职责是什么？" class="headerlink" title="1. 团队有那几个角色，每个角色的职责是什么？"></a>1. 团队有那几个角色，每个角色的职责是什么？</h2><ul><li><p>小组长</p><ul><li>团队建设</li><li>活动的组织</li><li>项目的审核以及总结</li></ul><span id="more"></span><p><img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210616233346337-1624026462955.png" alt="image-20210616233346337"></p></li><li><p>开发经理</p><ul><li>项目的设计与实现</li></ul><p><img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210616233548609-1624026462955.png" alt="image-20210616233548609"></p></li><li><p>计划经理</p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210616234046030-1624026462956.png" alt="image-20210616234046030"></p><p>质量经理</p><ul><li><p>计划的制定以及监控</p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210616234112469-1624026462956.png" alt="image-20210616234112469"></p></li></ul></li><li><p>测试经理</p><ul><li>项目的测试</li></ul></li><li><p>产品经理</p><ul><li>项目的需求分析</li></ul><p><img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210616233500310-1624026462956.png" alt="image-20210616233500310"></p></li></ul><h2 id="2-计划阶段"><a href="#2-计划阶段" class="headerlink" title="2.计划阶段"></a>2.计划阶段</h2><ul><li><p>为什么要做计划?</p><div class="note info simple"><p>答:  没有计划的项目是<wavy>危险的</wavy></p><ul><li>软件项目中的任务众多(组件团队，需求分析，设计，采购。。。。)</li><li>制约软件项目的因素众多（时间，成本，质量，人员。。。）</li><li>软件项目容易产生： 软件危机</li><li>仿照生产计划——软件计划—–》保证软件开发</li></ul></div></li><li><p>要有多少种计划?课程中强调哪几种?</p><div class="note info simple"><p>答:</p><ul><li>项目范围管理计划</li><li>进度管理计划 (课程强调)</li><li>成本管理计划</li><li>质量管理计划  (课程强调)</li><li>过程改进计划</li><li>人力配备管理计划</li><li>沟通管理计划</li><li>风险管理计划</li><li>采购管理计划</li><li>合同管理计划</li><li>测试计划  (课程强调)</li></ul></div></li><li><p>计划的作用</p><div class="note info simple"><p>答: 为项目负责人提供一个框架，使之能<emp>合理地估算</emp>软件项目开发所需的资源 、经费和开发进度，并控制软件项目开发过程并按此计划进行。</p></div></li><li><p>通过哪几步制定计划</p><div class="note info simple"><ol><li>明确目标</li><li>制定项目工作范围</li><li>在项目组内分配任务职责</li><li>统筹规划项目间活动的关联</li></ol></div></li><li><p>W B S</p></li><li><p>每个计划包含的内容</p><ul><li><p>进度计划</p><ul><li><p>活动的定义</p><div class="note info simple"><p>活动: 是软件项目为产生各个可交付成果（如代码）所必须进行的具体活动，完成了这些活动意味着完成了WBS结构中的项目细目和子细目。<br> 活动定义的目的是将软件项目工作分解为更小、更易管理的工作包，也叫活动或任务。这些小的活动应该是能够保障完成交付软件产品的可实施的详细任务。    </p></div><table><thead><tr><th><strong>阶段名</strong></th><th><strong>编号</strong></th><th><strong>任务</strong></th></tr></thead><tbody><tr><td>启动</td><td>1</td><td>1、组建团队2、产品范围3、评审4、监管</td></tr><tr><td>计划</td><td>2</td><td>1、进度计划2、质量计划3、评审4、监管</td></tr><tr><td>需求</td><td>3</td><td>1、调研2、需求分析3、需求报告4、评审5、监管</td></tr><tr><td>设计</td><td>4</td><td>1、概要设计2、详细设计3、测试计划4、评审5、监管</td></tr><tr><td>编程</td><td>5</td><td>1、编程2、测试3、监管</td></tr><tr><td>交付</td><td>6</td><td>1、各类文档的编写2、系统的配置和调试3、培训</td></tr></tbody></table></li><li><p>活动排序</p></li><li><p>活动资源估算</p></li><li><p>活动持续时间估算</p></li><li><p>制定进度表</p></li><li><p>编制进度计划说明书</p></li></ul></li><li><p>质量计划</p><ul><li><p>质量目标</p></li><li><p>缺陷引入与排除率</p><p>​    <div class="note info simple"><ul><li><p>缺陷引入率<br>程序员有一个共同的特点，他们都会引入许多缺陷。<br>在详细设计过程中会引入2个缺陷/小时<br>在编码程中会引入6个缺陷/小时。</p></li><li><p>缺陷排除比率<br>在设计复核过程中排除2个缺陷/小时<br>在代码复核过程中排除6个缺陷/小时</p></li></ul></div></p><ul><li><p>制定质量计划</p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210619145810989.png" alt="image-20210619145810989"></p></li><li><p>工作跟踪</p><ul><li>产生实际数据</li><li>记录每项工作的完成日期</li></ul></li></ul></li></ul></li><li><p>测试计划</p><ul><li>单元测试</li><li>集成测试</li><li>确认测试和系统测试的测试计划制定</li><li>测试用例设计</li><li>测试执行</li></ul></li></ul></li></ul><h2 id="3-系统需求分析阶段"><a href="#3-系统需求分析阶段" class="headerlink" title="3. 系统需求分析阶段"></a>3. 系统需求分析阶段</h2><ul><li><p>从哪几个方面对系统进行需求分析？</p><ul><li>系统用户的类型有哪些(角色)？</li><li>从角色出发获得系统的功能需求(必备,至少要有)</li><li>其他</li></ul></li><li><p>需要用到哪几个工具?</p><ul><li><p>用例图</p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210619155859921.png" alt="image-20210619155859921"></p><details ><summary> 查看类图教程 </summary>              <div class='content'>              <pre><code>&lt;div class=&quot;note info simple&quot;&gt;&lt;p&gt;用例图是指由参与者（Actor）、&lt;a href=&quot;https://baike.baidu.com/item/%E7%94%A8%E4%BE%8B/163511&quot;&gt;用例&lt;/a&gt;（Use Case），边界以及它们之间的关系构成的用于描述系统功能的视图。&lt;/p&gt;</code></pre><p>用例图包含六个元素，分别是：参与者(Actor)、用例(Use Case)、关联关系(Association)、包含关系(Include)、扩展关系(Extend)以及泛化关系(Generalization)。</p><ul><li><p>关联关系（Association）</p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/URbjPA.png" alt="URbjPA.png"></p></li><li><p>包含关系（Include）</p><ul><li>每次都会发生<br><img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/URbzxP.png" alt="URbzxP.png"></li></ul></li><li><p>扩展关系（Extend）</p><ul><li>一个用例可能有多个扩展点，每个扩展点可以出现多次。但是一般情况下，基础用例的执行不和涉及到扩展用例，只有特定的条件发生，扩展用例才被执行<br><img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/URqpKf.png" alt="URqpKf.png"></li></ul></li><li><p>泛化关系（Generalization）</p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/URq9r8.png" alt="URq9r8.png"></p></li></ul></div>              </div>            </details></li><li><p>用例说明</p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210619155822882.png" alt="image-20210619155822882"></p></li><li><p>协作图</p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210619155922029.png" alt="image-20210619155922029"></p></li><li><p>E-R图</p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210619155942828.png" alt="image-20210619155942828"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/NbOFbV.png" alt="NbOFbV.png"></p></li></ul></li><li><p>需求报告</p><ul><li><p>包含哪几点</p><div class="note info simple"><ol><li>引言<ol><li>编写目的</li><li>背景</li><li>参考资料</li></ol></li><li>需求概述<ol><li>目标</li><li>用户的特点</li><li>假定和约束</li></ol></li><li>需求分析<ol><li><p>功能的需求分析</p><ol><li><p>组织机构与角色</p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/wps4.jpg" alt="img"></p></li><li><p>用户的业务场景：识别出需求用例模型,给出用例图。</p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/wps3.jpg" alt="img"></p></li><li><p>用户业务活动中的数据实体：E-R图</p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/wps1.jpg" alt="img"></p></li><li><p>需求的动态模型: 协作图</p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/wps2.jpg" alt="img"></p></li></ol></li><li><p>输入输出要求</p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210620135750978.png" alt="image-20210620135750978"></p></li></ol></li><li>运行环境规定<ol><li><p>设备</p><blockquote><p>CPU：最低要求1.60GHz的处理器及以上</p><p>内存：最低RAM要求512MB</p><p>硬盘：需要500MB以上的可用空间</p><p>驱动器：需要CD-ROM或DVD-ROM驱动器</p><p>显示：具有800*600或更高分辨率的显示器</p><p>鼠标：Microsoft鼠标或兼容的指点设备</p></blockquote></li><li><p>支持软件</p><blockquote><p>操作系统：Microsoft Windows 10</p><p>集成开发环境：IntelliJ IDEA 2019.2.3 x64</p><p>服务器：apache-tomcat-9.0.39</p><p>数据库：mysql-5.7.27-winx64</p></blockquote></li></ol></li></ol></div></li><li><p>质量如何 - <wavy>见需求审查报告</wavy></p></li></ul></li></ul><h2 id="4-设计阶段"><a href="#4-设计阶段" class="headerlink" title="4. 设计阶段"></a>4. 设计阶段</h2><ul><li>设计哪几项<ul><li><p>系统平台确定</p><ul><li>开发环境</li><li>模式、架构(如M V C设计模式)<ul><li>页面设计</li><li>控制类设计</li><li>数据库设计</li></ul></li></ul></li><li><p>运行设计——时序图</p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/wps5.jpg" alt="img"></p><ul><li><p>异步消息(Asynchronous Message)：消息被发送后，发送者继续自己的活动不等待反馈</p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/URqGGR.png" alt="URqGGR.png"></p></li><li><p>返回消息(Return Message)：从过程调用返回</p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/URqJR1.png" alt="URqJR1.png"></p></li></ul></li><li><p>给控制类画类图(包括关联)</p><details ><summary> 查看类图教程 </summary>              <div class='content'>              <pre><code>![img](/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/807775-20160723144134247-1743796764.png)1. 关联关系&lt;span class=&#39;p green&#39;&gt;**(Association)**&lt;/span&gt;   &lt;div class=&quot;note info simple&quot;&gt;&lt;p&gt;通常关联关系用来实现连接有关联的对象所对应的类，即将一个类的对象作为另一个类的属性。&lt;/p&gt;</code></pre><p>还有就是关联关系可以是单向的也可以是双向的。双向的符号是没有方向标的，只是一条直线。</p><p><strong>例：</strong></p><p>单向：</p><p><strong><img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/807775-20160723144237560-523170503.png" alt="img"></strong></p><p>双向：</p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/807775-20160723144249232-258531063.png" alt="img"></p><p>自己：</p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/807775-20160723144303419-630408989.png" alt="img"></p><p>多重性关联关系：</p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/807775-20160723144350529-855486099.png" alt="img"></p><p><strong>例：</strong></p><p> <img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/807775-20160723144434013-1500135858.png" alt="img"></p><p>在这里要注意，看完此图中1…1以后不要认为一个Form是对应一个Button的。</p><p>不是的，应该是一个Button是对应一个Form的。1..1是表示另一个类的一个对象只与一个该类对象有关系。记住上面的表格。是另一个类与该类是什么关系。  </p></div>  <pre><code>2. 聚合关系&lt;span class=&#39;p green&#39;&gt;**(Aggregation)**&lt;/span&gt;   &lt;div class=&quot;note info simple&quot;&gt;&lt;p&gt;表示整体与部分的关系。考虑到一个整体类的组成结构。找出成员类。即成员对象是整体对象的一部分，但是成员对象可以队里整体对象独立存在。所以也有人说此关系是一种弱关系，那么强关系是什么后面我们会降到组成关系。&lt;/p&gt;</code></pre><p>聚合关系有一个特点，那就是<strong>可替换</strong>。</p><p> <img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/807775-20160723144510279-1844358604.png" alt="img"></p><p>直观的来看此图Car中必须得有一个Engine，这样才可以认为是一个完整体。</p><p>但是这个Engine是可替换的。是以传参的形式给Car赋一个Engine。</p><p>再次强调一下聚合是可替换的。Car中必须有一个Engine，但是此Engine可以是一个抽象的具体的Engine是在当你使用Car时可以具体去找一个合适的Engine装到Car上就行，如果没有Engine那么这个Car是跑不了。  </p></div>  <pre><code>3. 组合关系&lt;span class=&#39;p green&#39;&gt;**(Composition)**&lt;/span&gt;   &lt;div class=&quot;note info simple&quot;&gt;&lt;p&gt;表示整体与部分的关系。但是与聚合不同此关系是整体与部分是同生共死关系。即如果整体对象销毁了部分也会被销毁。&lt;/p&gt;</code></pre><p> <img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/807775-20160723144538529-541997244.png" alt="img"></p><p>上图Head是整体Mouth是部分，如果Head没了Mouth也跟着销毁了。如果Mouth没了Head也将是面目全非。在代码中Head中Mouth是直接new出来的。</p><p>就是说当你去new Head时Mouth也被new出来。记住一同创建一同销毁关系。也叫强关系。那么有人会问关联，聚合，组合我怎么认为是一样呢。</p><p>可以说他们是一样的都可以说是关联关系，是的，但是关联关系的强弱来区分了一下关联关系强度来看<strong>组合&gt;聚合&gt;关联</strong>。  </p></div>  <pre><code>4. 依赖关系&lt;span class=&#39;p green&#39;&gt;**(Dependency)**&lt;/span&gt;   &lt;div class=&quot;note info simple&quot;&gt;&lt;p&gt;是一个使用关系。特定事物的改变有可能会影响到使用该事物的其他事物。简单说在一个类中通过另外一个类来调用其方法的表示。&lt;/p&gt;</code></pre><p><img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/807775-20160723144633185-87772206.png" alt="img"></p><p>从图中可以看出Driver中使用了Car的move方法。那么就说明Driver是依赖于Car才能做Driver的职责。那么又有人会问聚合与依赖有区别吗，当然很明显Driver是一个整体，Car也是整体。不是整体与部分关系。  </p></div>  <pre><code>5. 泛化关系&lt;span class=&#39;p green&#39;&gt;**(Generalization)**&lt;/span&gt;   &lt;div class=&quot;note info simple&quot;&gt;&lt;p&gt;继承(extends)关系，父类与子类关系。这个好理解直接上图。&lt;/p&gt;</code></pre><p><strong><img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/807775-20160723144659935-1934295664.png" alt="img"></strong></p><p>从图中可以看出Student也是Person，Teacher也是Person。他们有共同的特征name，age。但是也有独自的特征一个是study一个是teach的特征。</p><p>子类那么就是Student，Teacher父类是Person。继承了父类那么子类可以直接适用父类的方法或属性（家产）。  </p></div>  <pre><code>6. 实现关系&lt;span class=&#39;p green&#39;&gt;**(Realization)**&lt;/span&gt;   &lt;div class=&quot;note info simple&quot;&gt;&lt;p&gt;类实现（implements）了接口.当多个类有类似的行为方式的时候我们通常会适用接口。&lt;/p&gt;</code></pre><p><img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/807775-20160723144730763-1113801133.png" alt="img"></p><p>Ship,Car都有move的特征他们都属于交通工具(Vehicle)只是他们move的方式不一样。那么我们就可以适用接口实现的方式去设计。代码中是<strong>public class Car implements Vehicle</strong>  </p></div>  <pre><code>7. 例子   &lt;div class=&quot;note info simple&quot;&gt;&lt;p&gt; &lt;img src=&quot;/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/807775-20160723144808576-494283562.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</code></pre><p>回顾一下之前关系。去分析一下此UML的类图。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">用户通过注册界面(RegisterForm)输入个人信息，</span><br><span class="line">用户点击“注册”按钮后将输入的信息通过一个封装用户输入数据的对象(UserDTO)传递给操作数据库的数据访问类(DAO)，</span><br><span class="line">为了提高系统的扩展性，针对不同的数据库可能需要提供不同的数据访问类，因此提供了数据访问类接口，</span><br><span class="line">如IUserDAO，每一个具体数据访问类都是某一个数据访问类接口的实现类，</span><br><span class="line">如OracleUserDAO就是一个专门用于访问Oracle数据库的数据访问类。</span><br></pre></td></tr></table></figure><p>UserDTO只是把userAcount，userPassword封装了一下使用了Getter，Setter。</p><p>那么肯定是RegisterForm的成员，注册窗体不能没有用户名与密码信息所以是组合关系。RegisterForm没有了用户信息(UserDTO)那么就没有意义了。</p><p>然后IUserDAO与RegisterForm是聚合关系因为是可以替换的。比如说你可以使用Oracle的以后扩展成Mysql的那么可以方便替换。</p><p>考虑到今后会扩展UserDAO所以适用了接口。</p><p>IUserDAO为什么与UserDTO是依赖关系，因为IUserDAO要把用户信息保存到数据库中那么必须需要用户信息。如果没有了用户信息此工作无法完成所以是依赖关系  </p></div>                </div>            </details></li><li><p>活动图/流程图画类中方法的处理流程</p><ul><li><p>程序流程图</p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/NLxs0A.png" alt="NLxs0A.png"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/URqYxx.png" alt="URqYxx.png"></p></li><li><p>活动图</p><p><a href="https://blog.csdn.net/damishidai15/article/details/82527060">活动图教程</a></p></li></ul></li></ul></li></ul><h2 id="5-开发阶段与测试阶段"><a href="#5-开发阶段与测试阶段" class="headerlink" title="5. 开发阶段与测试阶段"></a>5. 开发阶段与测试阶段</h2><ul><li><p>测试报告包含了哪些内容</p><div class="note info simple"><ol><li><p>前言</p><ol><li>编写目的</li><li>背景</li><li>参考资料</li></ol></li><li><p>测试内容</p><ol><li><p>单个模块测试的内容及进度</p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210620142426715.png" alt="image-20210620142426715"></p></li><li><p>系统整体测试的内容及进度</p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210620142511285.png" alt="image-20210620142511285"></p></li></ol></li><li><p>测试设计说明</p><blockquote><p>本系统的被测模块包括：登录模块、权限模块、管理员管理账户模块、管理员管理课程信息模块、教师发布作业模块、教师批改作业模块、教师查看作业分析情况模块、学生提交作业模块、学生修改作业模块、学生查看作业情况分析模块。所用到的测试方法是<wavy>黑盒测试</wavy>。</p></blockquote></li><li><p>测试用例说明</p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210620142644566.png" alt="image-20210620142644566"></p></li><li><p>人员分工</p></li></ol></div></li><li><p>测试用例正确理解，正确设定一个测试用例(重要)</p><table><thead><tr><th>功能1-1描述</th><th>检测输入的账号和密码是否匹配</th><th></th></tr></thead><tbody><tr><td>用例目的</td><td>测试用户能否正常登录系统</td><td></td></tr><tr><td>前提条件</td><td>已经进入登录界面</td><td></td></tr><tr><td>输入/动作</td><td>期望的输出/相应</td><td>实际情况</td></tr><tr><td>用户名：18120101密码：123123</td><td>显示登录成功，跳转到首页</td><td>显示登录成功，跳转到首页</td></tr><tr><td>用户名：18120101密码：</td><td>显示未输入密码</td><td>显示未输入密码</td></tr><tr><td>用户名：密码：123456</td><td>显示未输入用户名</td><td>显示未输入用户名</td></tr><tr><td>用户名：18120101密码：123</td><td>显示密码不正确</td><td>显示密码不正确</td></tr><tr><td>用户名：123密码：123456</td><td>显示用户不存在</td><td>显示用户不存在</td></tr><tr><td>功能1-2-1描述</td><td>在未登录情况下，通过域名访问系统</td><td></td></tr><tr><td>用例目的</td><td>测试未登录用户能否非正常访问系统</td><td></td></tr><tr><td>前提条件</td><td>未登录系统</td><td></td></tr><tr><td>输入/动作</td><td>期望的输出/相应</td><td>实际情况</td></tr><tr><td><a href="url:http://localhost:8181/">http://localhost:8080/</a>student/home</td><td>跳转到登录页面</td><td>跳转到登录页面</td></tr><tr><td><a href="url:http://localhost:8181/">http://localhost:8080/</a>teacher/home</td><td>跳转到登录页面</td><td>跳转到登录页面</td></tr><tr><td><a href="url:http://localhost:8181/">http://localhost:8080/</a>admin/home</td><td>跳转到登录页面</td><td>跳转到登录页面</td></tr><tr><td>功能1-2-2描述</td><td>在已登录情况下，访问与其权限相同的子页面</td><td></td></tr><tr><td>用例目的</td><td>测试已登录用户能否非正常访问系统</td><td></td></tr><tr><td>前提条件</td><td>已经登录系统</td><td></td></tr><tr><td>输入/动作</td><td>期望的输出/相应</td><td>实际情况</td></tr><tr><td><a href="url:http://localhost:8181/">http://localhost:8080/</a>student/home</td><td>跳转到学生端的首页</td><td>跳转到学生端的首页</td></tr><tr><td><a href="url:http://localhost:8181/">http://localhost:8080/</a>student/upload</td><td>跳转到学生上传作业页面</td><td>跳转到学生上传作业页面</td></tr><tr><td><a href="url:http://localhost:8181/">http://localhost:8080/</a>student/download</td><td>跳转到学生下载作业页面</td><td>跳转到学生下载作业页面</td></tr><tr><td>功能1-2-3描述</td><td>在已登录情况下，访问与其权限不一致的页面</td><td></td></tr><tr><td>用例目的</td><td>测试已登录用户能否非正常访问系统</td><td></td></tr><tr><td>前提条件</td><td>已经登录系统</td><td></td></tr><tr><td>输入/动作</td><td>期望的输出/相应</td><td>实际情况</td></tr><tr><td><a href="url:http://localhost:8181/">http://localhost:8080/</a>student/home</td><td>跳转到学生端的首页</td><td>跳转到学生端的首页</td></tr><tr><td><a href="url:http://localhost:8181/">http://localhost:8080/</a>teacher/home</td><td>显示没有权限访问</td><td>显示没有权限访问</td></tr><tr><td><a href="url:http://localhost:8181/">http://localhost:8080/</a>admin/home</td><td>显示没有权限访问</td><td>显示没有权限访问</td></tr></tbody></table><table><thead><tr><th>功能3-1-1描述</th><th>教师能否进入发布作业页面</th><th></th></tr></thead><tbody><tr><td>用例目的</td><td>测试教师页面间的跳转功能</td><td></td></tr><tr><td>前提条件</td><td>已经登录教师账号</td><td></td></tr><tr><td>输入/动作</td><td>期望的输出/相应</td><td>实际情况</td></tr><tr><td>点击发布作业按钮</td><td>跳转到发布作业页面</td><td>跳转到发布作业页面</td></tr><tr><td>功能3-1-2描述</td><td>教师能否发布指定课程的作业</td><td></td></tr><tr><td>用例目的</td><td>测试教师页面间的跳转功能</td><td></td></tr><tr><td>前提条件</td><td>已经登录教师账号，点击了发布作业按钮</td><td></td></tr><tr><td>输入/动作</td><td>期望的输出/相应</td><td>实际情况</td></tr><tr><td>课程id:87501</td><td>跳转到具体发布作业页面</td><td>跳转到具体发布作业页面</td></tr><tr><td>课程id:123</td><td>显示该课程不存在，要求重新输入课程id</td><td>显示该课程不存在，要求重新输入课程id</td></tr></tbody></table><table><thead><tr><th>功能3-1-3描述</th><th>教师能否发布作业</th><th></th></tr></thead><tbody><tr><td>用例目的</td><td>测试教师发布作业功能</td><td></td></tr><tr><td>前提条件</td><td>已经登录教师账号，进入了发布作业界面</td><td></td></tr><tr><td>输入/动作</td><td>期望的输出/相应</td><td>实际情况</td></tr><tr><td>题目：test答案: test分值：4知识点：test点击发布作业按钮</td><td>显示作业发布成功</td><td>显示作业发布成功</td></tr><tr><td>题目：答案: test分值：4知识点：test点击发布作业按钮</td><td>显示题目不能为空，发布失败</td><td>显示题目不能为空，发布失败</td></tr><tr><td>题目：test答案: 分值：4知识点：test点击发布作业按钮</td><td>显示答案不能为空，发布失败</td><td>显示答案不能为空，发布失败</td></tr></tbody></table></li></ul><hr><h2 id="6-题型"><a href="#6-题型" class="headerlink" title="6. 题型"></a>6. 题型</h2><ul><li>简答题 <span class='p red'>50分</span><ul><li>如每个阶段用什么工具、制定计划哪几步？</li></ul></li><li>案例设计 <span class='p blue'>50分</span><ul><li>根据项目简介做<ul><li>需求分析</li><li>设计</li></ul></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;软件协同期末复习&quot;&gt;&lt;a href=&quot;#软件协同期末复习&quot; class=&quot;headerlink&quot; title=&quot;软件协同期末复习&quot;&gt;&lt;/a&gt;软件协同期末复习&lt;/h1&gt;&lt;h2 id=&quot;1-团队有那几个角色，每个角色的职责是什么？&quot;&gt;&lt;a href=&quot;#1-团队有那几个角色，每个角色的职责是什么？&quot; class=&quot;headerlink&quot; title=&quot;1. 团队有那几个角色，每个角色的职责是什么？&quot;&gt;&lt;/a&gt;1. 团队有那几个角色，每个角色的职责是什么？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;小组长&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;团队建设&lt;/li&gt;
&lt;li&gt;活动的组织&lt;/li&gt;
&lt;li&gt;项目的审核以及总结&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="软件协同设计" scheme="http://example.com/categories/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="期末" scheme="http://example.com/tags/%E6%9C%9F%E6%9C%AB/"/>
    
    <category term="复习提纲" scheme="http://example.com/tags/%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/"/>
    
    <category term="软件协同设计" scheme="http://example.com/tags/%E8%BD%AF%E4%BB%B6%E5%8D%8F%E5%90%8C%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>嵌入式期末复习</title>
    <link href="http://example.com/2021/06/18/%E5%B5%8C%E5%85%A5%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    <id>http://example.com/2021/06/18/%E5%B5%8C%E5%85%A5%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</id>
    <published>2021-06-18T13:42:57.000Z</published>
    <updated>2021-06-19T01:36:40.729Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 align="center">嵌入式期末复习</h3><hr><blockquote><p><strong>题型</strong>: </p><ul><li><strong>判断题</strong>(会有作业的单选和多选题)</li><li><strong>简答题</strong></li><li><strong>设计题</strong></li><li><strong>程序题</strong></li></ul></blockquote><span id="more"></span><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">OS.EVENT * mySem,myBox;</span><br><span class="line">main() &#123;</span><br><span class="line">    OSTaskCreate(sp,一个参数);</span><br><span class="line">    任务名称、堆栈指针(顶)、分配堆栈、优先级、任务代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>简答题 <strong>p p t 全有</strong></p></blockquote><p><img src="/images/%E5%B5%8C%E5%85%A5%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/9E42F84B69AF2E020CAB13CC8796997F-1624026367098.jpg" alt="img"><img src="/images/%E5%B5%8C%E5%85%A5%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/D0DBC768767751AFBA2C89AD6D04B9B6-1624026367099.jpg" alt="img"></p><blockquote><h4 id="点灯的细节"><a href="#点灯的细节" class="headerlink" title="点灯的细节"></a>点灯的细节</h4><p>p33 —-p3口第三引脚</p><p>ARM 32位字长</p><p><img src="/images/%E5%B5%8C%E5%85%A5%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/14BC44A5034B4BD3FF447FCF77146BF4-1624026367099.jpg" alt="img"></p><p><img src="/images/%E5%B5%8C%E5%85%A5%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/9C00BD22061AEE082D8DCFE36105878F-1624026367099.jpg" alt="img"></p><p><img src="/images/%E5%B5%8C%E5%85%A5%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/E2C273CEB24BAECB70A614F923E6C4C0-1624026367099.jpg" alt="img"></p></blockquote><blockquote><h4 id="等待列表和就绪表的计算"><a href="#等待列表和就绪表的计算" class="headerlink" title="等待列表和就绪表的计算"></a><em>等待列表</em>和<em>就绪表</em>的计算</h4><p><img src="/images/%E5%B5%8C%E5%85%A5%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210618105144680-1624026367099.png" alt="image-20210618105144680"></p></blockquote><blockquote><h4 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h4><p>中断用<strong>MSP</strong></p><p>MSP 特权级堆栈指针</p><p>PSP 用户级堆栈指针</p><p>中断服务程序不可以创建任务、分配堆栈、设置延时等</p><p>调用了lock函数的任务不可以调用任何使它挂起的函数</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 align=&quot;center&quot;&gt;嵌入式期末复习&lt;/h3&gt;

&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;题型&lt;/strong&gt;: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;判断题&lt;/strong&gt;(会有作业的单选和多选题)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;简答题&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设计题&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;程序题&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="嵌入式技术" scheme="http://example.com/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="复习提纲" scheme="http://example.com/tags/%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/"/>
    
    <category term="嵌入式" scheme="http://example.com/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    <category term="期末考试" scheme="http://example.com/tags/%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>分布式期末复习</title>
    <link href="http://example.com/2021/06/18/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    <id>http://example.com/2021/06/18/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</id>
    <published>2021-06-18T12:43:22.000Z</published>
    <updated>2021-06-19T12:30:31.151Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="分布式计算期末复习"><a href="#分布式计算期末复习" class="headerlink" title="分布式计算期末复习"></a>分布式计算期末复习</h1><hr><blockquote><p>闭卷考A/B卷</p></blockquote><ol><li><strong>问答题</strong> * 4 —— 33%</li><li><strong>案例应用题</strong> * 3 —— 33%<ul><li>设计思路</li><li>框架</li></ul></li><li><strong>代码题</strong> * 4 —— 33%</li></ol><hr><span id="more"></span><h2 id="1-JAVA编程基础"><a href="#1-JAVA编程基础" class="headerlink" title="1. JAVA编程基础"></a>1. JAVA编程基础</h2><ul><li><p>Lambda表达式，能将代码改成Lambda表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 不需要参数,返回值为 5  </span></span><br><span class="line">() -&gt; <span class="number">5</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 2. 接收一个参数(数字类型),返回其2倍的值  </span></span><br><span class="line">x -&gt; <span class="number">2</span> * x  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 3. 接受2个参数(数字),并返回他们的差值  </span></span><br><span class="line">(x, y) -&gt; x – y  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 4. 接收2个int型整数,返回他们的和  </span></span><br><span class="line">(<span class="keyword">int</span> x, <span class="keyword">int</span> y) -&gt; x + y  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 5. 接受一个 string 对象,并在控制台打印,不返回任何值(看起来像是返回void)  </span></span><br><span class="line">(String s) -&gt; System.out.print(s)</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 大括号中的返回语句</span></span><br><span class="line">MathOperation multiplication = (<span class="keyword">int</span> a, <span class="keyword">int</span> b) -&gt; &#123; <span class="keyword">return</span> a * b; &#125;;</span><br></pre></td></tr></table></figure><p><strong>例题</strong></p><p>原始代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.BorderLayout;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ex8_10_UseButtonEvent</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">JFrame frm = <span class="keyword">new</span> JFrame(<span class="string">&quot;实验1&quot;</span>);</span><br><span class="line">frm.setLayout(<span class="keyword">new</span> BorderLayout());</span><br><span class="line">JButton btn = <span class="keyword">new</span> JButton(<span class="string">&quot;按钮&quot;</span>);</span><br><span class="line">frm.getContentPane().add(btn);</span><br><span class="line">ButtonHandler btnHandler = <span class="keyword">new</span> ButtonHandler();</span><br><span class="line">btn.addActionListener(btnHandler); </span><br><span class="line"></span><br><span class="line">frm.setBounds(<span class="number">400</span>, <span class="number">200</span>, <span class="number">400</span>, <span class="number">200</span>);</span><br><span class="line">frm.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将其修改为箭头函数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ButtonHandler</span> <span class="keyword">implements</span> <span class="title">ActionListener</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;点击按钮&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改后:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.USST.Tamiflu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.BorderLayout;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ex8_10_UseButtonEvent</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">JFrame frm = <span class="keyword">new</span> JFrame(<span class="string">&quot;实验1&quot;</span>);</span><br><span class="line">frm.setLayout(<span class="keyword">new</span> BorderLayout());</span><br><span class="line"></span><br><span class="line"><span class="comment">// lambda修改事件处理</span></span><br><span class="line">JButton btn = <span class="keyword">new</span> JButton(<span class="string">&quot;按钮&quot;</span>);</span><br><span class="line">frm.getContentPane().add(btn);</span><br><span class="line"><span class="comment">//lambda表达式</span></span><br><span class="line">btn.addActionListener((e) -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;点击按钮&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">frm.setBounds(<span class="number">400</span>, <span class="number">200</span>, <span class="number">400</span>, <span class="number">200</span>);</span><br><span class="line">frm.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>泛型能看懂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    1:把泛型定义在类上</span></span><br><span class="line"><span class="comment">    2:类型变量定义在类上,方法中也可以使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectTool</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T obj;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getObj</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObj</span><span class="params">(T obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-JAVA高级功能"><a href="#2-JAVA高级功能" class="headerlink" title="2. JAVA高级功能"></a>2. JAVA高级功能</h2><ul><li><p>会写反射代码(给你相关类和方法，按要求将类实例化对象，用反射来实例化成对象，用反射去调用方法(有参/无参)和成员变量，不可直接new!)</p><blockquote><p>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。</p></blockquote><p><img src="/images/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210619194105678.png" alt="image-20210619194105678"></p><p><img src="/images/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210619194644783.png" alt="image-20210619194644783"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得当前类以及超类的public Method：</span></span><br><span class="line">Method[] arrMethods = classType. getMethods();</span><br><span class="line"><span class="comment">//获得当前类申明的所有Method：</span></span><br><span class="line">Method[] arrMethods = classType. getDeclaredMethods();</span><br><span class="line"><span class="comment">//获得当前类以及超类指定的public Method：</span></span><br><span class="line">Method method = classType. getMethod(String name, Class&lt;?&gt;... parameterTypes);</span><br><span class="line"><span class="comment">//获得当前类申明的指定的Method：</span></span><br><span class="line">Method method = classType. getDeclaredMethod(String name, Class&lt;?&gt;... parameterTypes) </span><br><span class="line"><span class="comment">//通过反射动态运行指定Method：</span></span><br><span class="line">Object obj = method. invoke(Object obj, Object... args) </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210619200707202.png" alt="image-20210619200707202"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得当前类以及超类的public Field：</span></span><br><span class="line">Field[] arrFields = classType. getFields();</span><br><span class="line"><span class="comment">//获得当前类申明的所有Field：</span></span><br><span class="line">Field[] arrFields = classType. getDeclaredFields();</span><br><span class="line"><span class="comment">//获得当前类以及超类指定的public Field：</span></span><br><span class="line">Field field = classType. getField(String name);</span><br><span class="line"><span class="comment">//获得当前类申明的指定的Field：</span></span><br><span class="line">Field field = classType. getDeclaredField(String name); </span><br><span class="line"><span class="comment">//通过反射动态设定Field的值：</span></span><br><span class="line">fieldType.set(Object obj, Object value);</span><br><span class="line"><span class="comment">//通过反射动态获取Field的值： </span></span><br><span class="line">Object obj = fieldType. get(Object obj) ;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210619201231566.png" alt="image-20210619201231566"></p><p><img src="/images/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210619201703906.png" alt="image-20210619201703906"></p></li><li><p>依赖注入DI和控制反转 I O C 的代码以及概念</p><ul><li><p>什么是依赖注入(来源于DIP依赖倒置)</p><blockquote><p>依赖注入DI（Dependency Injection） ：所依赖的对象由外部IoC容器注入进去</p></blockquote></li><li><p>什么是DIP</p><p><img src="/images/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210619202946638.png" alt="image-20210619202946638"></p></li><li><p>优点，解决了什么问题(解决了DIP)</p></li><li><p>如何反转控制?(用DI)</p></li><li><p>依赖注入常见的方式(主要是前两种构造函数注入和setter注入),会写代码</p></li><li><p>代码题: 用依赖注入改写程序</p></li></ul></li><li><p>代理模式</p><ul><li>A O P是代理模式的重要应用</li><li>代理模式的概念</li><li>静态代理与动态代理(动态更重要)</li><li>不考代码，但要知道动态代理实现的过程和概念</li><li>A O P的概念，要自己总结一个完整概念，为啥要有A O P(减小程序耦合度)</li><li>A O P的应用场景(日志、安全等)</li></ul></li><li><p>R P C</p><ul><li>概念</li><li>常见实现方案有哪些</li><li>框架的基本原理(会画那张图)</li></ul></li><li><p>R M I</p><ul><li>知道概念就行，不考代码</li></ul></li></ul><h2 id="3-网络I-O"><a href="#3-网络I-O" class="headerlink" title="3. 网络I/O"></a>3. 网络I/O</h2><ul><li><p>基本概念: 阻塞、非阻塞、异步、同步…</p></li><li><p>网络I/O常见的通信模型</p><p><img src="/images/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210617083724144.png" alt="image-20210617083724144"></p></li><li><p>Netty应用场景</p><p><img src="/images/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210618214012163.png" alt="image-20210618214012163"></p></li><li><p>现有R P C的解决方案(技术选型)</p><p><img src="/images/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210617083950144.png" alt="image-20210617083950144"></p></li></ul><h2 id="4-消息中间件M-Q"><a href="#4-消息中间件M-Q" class="headerlink" title="4. 消息中间件M Q"></a>4. 消息中间件M Q</h2><ul><li><p>M Q能干啥</p></li><li><p>设计题，设计网络架构来解决应用场景(可用M Q，用具体产品，如Active M Q或Rabbit M Q)</p></li><li><p>能画这个设计方案的架构图</p><p><img src="/images/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210617084716784.png" alt="image-20210617084716784"></p></li><li><p>M Q的概念</p></li></ul><h2 id="5-分布式存储"><a href="#5-分布式存储" class="headerlink" title="5. 分布式存储"></a>5. 分布式存储</h2><ul><li><p>结构化、半结构化、非结构化</p></li><li><p>关系模型不考</p></li><li><p>主要考核</p><ul><li>非结构化数据——分布式文件系统Ha d o o p</li><li>半结构化数据——N O S Q L</li></ul></li><li><p>案例分析，给一个业务场景，用服务器的拆分、消息队列、缓存(用尽可能多的方案)，不会细到拆表</p><p><img src="/images/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210617085320731.png" alt="image-20210617085320731"></p></li><li><p>NO S Q L</p><ul><li><p>理论基石C A P</p><p><img src="/images/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210617085431930.png" alt="image-20210617085431930"></p></li><li><p>C A P的概念</p><p><img src="/images/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210617085505592.png" alt="image-20210617085505592"></p></li><li><p>NO S Q L四大类型</p></li><li><p>主要考核redis</p><ul><li><p>REDIS架构图</p><p><img src="/images/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210617085849979.png" alt="image-20210617085849979"></p><p><img src="/images/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210618213609050-1624023438557.png" alt="image-20210618213609050"></p></li><li><p>给关系模型的表，让你转换成redis存储(案例分析题10分)</p></li></ul></li></ul></li></ul><h2 id="6-分布式架构"><a href="#6-分布式架构" class="headerlink" title="6. 分布式架构"></a>6. 分布式架构</h2><ul><li>SOA和微服务概念</li></ul><h2 id="7-大数据"><a href="#7-大数据" class="headerlink" title="7. 大数据"></a>7. 大数据</h2><ul><li><p>基本概念以及hadoop的使用</p></li><li><p>HDFS架构</p><p><img src="/images/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210617090134059.png" alt="image-20210617090134059"></p><p>几个Node分别干嘛</p></li><li><p>hdfs基本命令(案例题，类似于实验1)</p><p><img src="/images/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210617090220829.png" alt="image-20210617090220829"></p></li><li><p>MapReduce</p><ul><li><p>会写代码(WordCount)</p></li><li><p>Shuffling过程</p></li><li><p>会画图(不一定是WordCount，区别可能只是在Reducing),了解每一过程做了什么</p><p><img src="/images/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20210617090634299.png" alt="image-20210617090634299"></p></li><li><p>会写Mapper函数和Reducer函数(类似实验2)</p></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;分布式计算期末复习&quot;&gt;&lt;a href=&quot;#分布式计算期末复习&quot; class=&quot;headerlink&quot; title=&quot;分布式计算期末复习&quot;&gt;&lt;/a&gt;分布式计算期末复习&lt;/h1&gt;&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;闭卷考A/B卷&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;问答题&lt;/strong&gt; * 4 —— 33%&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;案例应用题&lt;/strong&gt; * 3 —— 33%&lt;ul&gt;
&lt;li&gt;设计思路&lt;/li&gt;
&lt;li&gt;框架&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;代码题&lt;/strong&gt; * 4 —— 33%&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="分布式计算" scheme="http://example.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    
    
    <category term="分布式计算" scheme="http://example.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    
    <category term="期末" scheme="http://example.com/tags/%E6%9C%9F%E6%9C%AB/"/>
    
    <category term="复习提纲" scheme="http://example.com/tags/%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/"/>
    
  </entry>
  
</feed>
